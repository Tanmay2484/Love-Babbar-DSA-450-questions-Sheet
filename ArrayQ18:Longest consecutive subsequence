/*Longest consecutive subsequence
   question link: https://practice.geeksforgeeks.org/problems/longest-consecutive-subsequence2449/1
   article link: https://www.geeksforgeeks.org/longest-consecutive-subsequence/
   Input:
  N = 7
  a[] = {2,6,1,9,4,5,3}
  Output:
  6
  Explanation:
  The consecutive numbers here
  are 1, 2, 3, 4, 5, 6. These 6 
  numbers form the longest consecutive
  subsquence.
  Example 2:

  Input:
  N = 7
  a[] = {1,9,3,10,4,20,2}
  Output:
  4
  Explanation:
  1, 2, 3, 4 is the longest
  consecutive subsequence.
*/
//Function to return length of longest subsequence of consecutive integers.
    int findLongestConseqSubseq(int arr[], int n)
    {
      int ans = 0, count = 0;
 
    // sort the array
    sort(arr, arr + n);
 
    vector<int> v;
    v.push_back(arr[0]);
 
    // insert repeated elements only once in the vector
    for (int i = 1; i < n; i++) {
        if (arr[i] != arr[i - 1])
            v.push_back(arr[i]);
    }
    // find the maximum length
    // by traversing the array
    for (int i = 0; i < v.size(); i++) {
 
        // Check if the current element is equal
        // to previous element +1
        if (v[i] == v[i - 1] + 1)
            count++;
        // reset the count
        else
            count = 1;
 
        // update the maximum
        ans = max(ans, count);
    }
    return ans;
    }
